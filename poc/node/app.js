// Generated by CoffeeScript 1.3.3
(function() {
  var app, bgcolorlist, callWithRandomLatency, color, express, http, i, io, sendAction, server, users;

  express = require('express');

  io = require('socket.io');

  app = module.exports = express();

  http = require('http');

  server = http.createServer(app);

  io = require('socket.io').listen(server);

  app.configure(function() {
    return app.use(express["static"]("" + __dirname + "/public"));
  });

  app.configure('development', function() {
    return app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  });

  app.configure('production', function() {
    return app.use(express.errorHandler());
  });

  users = [];

  i = 0;

  callWithRandomLatency = function(fn, latency) {
    return setTimeout(fn, Math.random() * latency);
  };

  bgcolorlist = ["#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#FF00FF", "#00FFFF"];

  color = '#000000';

  i = 0;

  io.sockets.on('connection', function(socket) {
    socket.on('disconnect', function() {
      return i--;
    });
    socket.on('getTime', function(data) {
      var time;
      i++;
      console.log(data);
      time = new Date().getTime();
      return callWithRandomLatency(function() {
        return socket.json.emit('setTime', {
          time: time,
          i: i,
          users: io.sockets.clients().length
        });
      }, 2000);
    });
    socket.on('changeColor', function() {
      color = bgcolorlist[i++ % bgcolorlist.length];
      return sendAction('changeColor', {
        color: color
      }, 2000);
    });
    socket.on('doubleChangeColor', function() {
      color = bgcolorlist[i++ % bgcolorlist.length];
      sendAction('changeColor', {
        color: color
      }, 2000);
      color = bgcolorlist[i++ % bgcolorlist.length];
      return sendAction('changeColor', {
        color: color
      }, 2000);
    });
    return socket.on('reloadClients', function() {
      return sendAction('reload', null, 2000);
    });
  });

  sendAction = function(action, args, latency) {
    return io.sockets.clients().forEach(function(socket) {
      callWithRandomLatency(function() {
        return socket.json.emit(action, args);
      });
      return latency;
    });
  };

  server.listen(1337);

  console.log("Server is listening on port %d in %s mode", server.address().port, app.settings.env);

}).call(this);
