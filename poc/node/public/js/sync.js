// Generated by CoffeeScript 1.3.3
(function() {

  (function($, window, console) {
    var Sync, defaults, document, log, main, pluginName;
    pluginName = 'sync';
    document = window.document;
    log = function() {
      return console.log.apply(console, arguments);
    };
    defaults = {
      a: 42,
      b: 43
    };
    Sync = (function() {

      function Sync(options) {
        this.connected = false;
        this.options = $.extend({}, defaults, options);
        this.socket = null;
        this.keepConnection();
        return this;
      }

      Sync.prototype.keepConnection = function() {
        var that;
        that = this;
        this.socket = io.connect('', this.options);
        this.socket.on('connecting', function() {
          return console.log('connecting');
        });
        this.socket.on('connect', function() {
          that.connected = true;
          console.log('connect');
          return this.emit('getTime');
        });
        this.socket.on('connect_failed', function() {
          return console.log('connect failed');
        });
        this.socket.on('disconnect', function() {
          that.connected = false;
          console.log('disconnect');
          return setTimeout(that.keepConnection, 1000);
        });
        this.socket.on('setTime', function(data) {
          var socket;
          socket = this;
          that.serverDiff = data.time - new Date().getTime();
          console.log('i', data.i);
          console.log('users', data.users);
          console.log('serverDiff', that.serverDiff);
          return setTimeout((function() {
            var estimatedServerTime;
            estimatedServerTime = new Date().getTime() + that.serverDiff;
            return socket.emit('checkDiff', {
              diff: that.serverDiff,
              estimatedTime: estimatedServerTime
            });
          }), Math.random() * 100);
        });
        return this.socket.on('addAction', function(data) {
          var diff, estimatedServerTime, time;
          console.log('addAction', data);
          time = new Date().getTime();
          estimatedServerTime = time + that.serverDiff;
          diff = data.time - estimatedServerTime;
          console.log('diff', diff);
          console.log('tim1', data.time);
          console.log('tim2', data.tim2);
          console.log('tim3', data.tim3);
          console.log('tim0', time);
          console.log('tim4', time + diff);
          return setTimeout((function() {
            if (data.action === 'changeColor') {
              return $('body').css('background', data.args.color);
            } else if (data.action === 'reload') {
              return document.location.href = document.location.href;
            } else if (data.action === 'playSound') {
              return $('#sound')[0].play();
            }
          }), diff);
        });
      };

      Sync.prototype.emit = function(event, hash) {
        if (this.connected) {
          return this.socket.emit(event, hash);
        } else {
          return console.log('you are not connected, please wait..');
        }
      };

      Sync.prototype.on = function(event, fn) {
        console.log(this.socket);
        return this.socket.on(event, fn);
      };

      return Sync;

    })();
    main = function() {
      var options, s;
      options = {
        b: 44,
        c: 45
      };
      s = new Sync(options);
      $('input').click(function() {
        console.log($(this).attr('data-action'));
        return s.emit($(this).attr('data-action'));
      });
      return s;
    };
    return $(document).ready(main);
  })(jQuery, window, console);

}).call(this);
